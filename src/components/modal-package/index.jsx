import React, { useState } from 'react';
import { Card, Button, Tabs, Tag, Row, Col } from 'antd';
import { CheckCircleFilled } from '@ant-design/icons';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

// Modal chi ti·∫øt g√≥i (t√≠ch h·ª£p l·∫°i logic PremiumDetailsModal)
import { Modal, Typography, List, Divider } from 'antd';
import { useNavigate } from 'react-router-dom';
import api from '../../configs/axios';
const { Title, Text, Paragraph } = Typography;

const PLANS = [
  {
    id: 'free',
    name: 'G√≥i Mi·ªÖn Ph√≠',
    price: 0,
    duration: 'Kh√¥ng gi·ªõi h·∫°n',
    shortDescription: 'Tr·∫£i nghi·ªám c√°c t√≠nh nƒÉng c∆° b·∫£n',
    keyFeatures: [
      'B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c file h∆∞·ªõng d·∫´n chi ti·∫øt',
      'T·ª± theo d√µi k·∫ø ho·∫°ch b·ªè thu·ªëc t·∫°i nh√†',
      'H·ªá th·ªëng s·∫Ω nh·∫Øc nh·ªü b·∫°n m·ªói ng√†y ƒë·ªÉ ti·∫øp th√™m ƒë·ªông l·ª±c',
    ],
    benefits: [
      'Truy c·∫≠p c√°c t√≠nh nƒÉng n·ªÅn t·∫£ng ƒë·ªÉ b·∫Øt ƒë·∫ßu h√†nh tr√¨nh b·ªè thu·ªëc.',
      'K·∫ø ho·∫°ch ƒë∆°n gi·∫£n, kh√¥ng c√° nh√¢n ho√° n√¢ng cao.',
      'C√≥ th·ªÉ n√¢ng c·∫•p Premium b·∫•t c·ª© l√∫c n√†o ƒë·ªÉ nh·∫≠n h·ªó tr·ª£ chuy√™n s√¢u.',
    ],
    description:
      'Ph√π h·ª£p cho ng∆∞·ªùi mu·ªën th·ª≠ tr·∫£i nghi·ªám tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh n√¢ng c·∫•p l√™n Premium.',
    color: 'gray',
    borderColor: 'border-gray-400',
    buttonClass: 'bg-gray-500 hover:bg-gray-600',
    ctaText: 'B·∫Øt ƒë·∫ßu',
    disabled: false,
    popular: false,
  },
  {
    id: 'premium-1m',
    name: 'Premium 1 th√°ng',
    price: 99000,
    duration: '30 ng√†y',
    shortDescription: 'Ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu',
    keyFeatures: [
      'K·∫ø ho·∫°ch cai thu·ªëc c√° nh√¢n h√≥a',
      'Nhi·ªám v·ª• v√† b√†i t·∫≠p h√†ng ng√†y',
      'Ghi nh·∫≠t k√Ω + ph·∫£n h·ªìi chuy√™n gia',
      'Th·ªëng k√™ chi ti·∫øt qu√° tr√¨nh ph·ª•c h·ªìi',
      '4 bu·ªïi t∆∞ v·∫•n 1:1 trong th√°ng',
    ],
    benefits: [
      'K·∫ø ho·∫°ch cai thu·ªëc ƒë∆∞·ª£c c√° nh√¢n h√≥a theo ƒë·ªô nghi·ªán v√† m·ª•c ti√™u c√° nh√¢n.',
      'Nhi·ªám v·ª• m·ªói ng√†y, b√†i t·∫≠p ·ª©ng ph√≥ c∆°n th√®m thu·ªëc, h∆∞·ªõng d·∫´n ki·ªÉm so√°t c·∫£m x√∫c.',
      'Ghi nh·∫≠t k√Ω + nh·∫≠n ph·∫£n h·ªìi t·ª´ chuy√™n gia hu·∫•n luy·ªán.',
      'Th·ªëng k√™ chi ti·∫øt qu√° tr√¨nh ph·ª•c h·ªìi: s·ªë ng√†y b·ªè thu·ªëc, s·ªë ƒëi·∫øu tr√°nh ƒë∆∞·ª£c, s·ªë ti·ªÅn ti·∫øt ki·ªám, v.v.',
      '∆Øu ti√™n h·ªó tr·ª£ k·ªπ thu·∫≠t v√† gi·∫£i ƒë√°p.',
      'üí¨ 4 bu·ªïi t∆∞ v·∫•n 1:1 trong th√°ng (30‚Äì45 ph√∫t/bu·ªïi, ƒë·∫∑t l·ªãch linh ho·∫°t, online Google Meet).',
    ],
    description:
      'Ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu cai thu·ªëc, c·∫ßn ƒë·ªãnh h∆∞·ªõng v√† ƒë∆∞·ª£c theo s√°t trong giai ƒëo·∫°n ƒë·∫ßu. Nh·ªØng ng∆∞·ªùi c√≥ ƒë·ªông l·ª±c t·ª± th√¢n m·∫°nh, nh∆∞ng v·∫´n c·∫ßn ƒë∆∞·ª£c kh√≠ch l·ªá v√† ƒëi·ªÅu ch·ªânh k·∫ø ho·∫°ch khi g·∫∑p c·∫£n tr·ªü.',
    color: 'blue',
    borderColor: 'border-blue-500',
    buttonClass: 'bg-blue-500 hover:bg-blue-600',
    ctaText: 'Xem chi ti·∫øt',
    disabled: false,
    popular: false,
  },
  {
    id: 'premium-3m',
    name: 'Premium 3 th√°ng',
    price: 199000,
    duration: '90 ng√†y',
    shortDescription: 'Duy tr√¨ ƒë·ªông l·ª±c l√¢u d√†i',
    keyFeatures: [
      'M·ªçi t√≠nh nƒÉng g√≥i 1 th√°ng',
      'ƒêi·ªÅu ch·ªânh k·∫ø ho·∫°ch theo ti·∫øn ƒë·ªô',
      '∆Øu ti√™n ph·∫£n h·ªìi trong 24h',
      'Theo d√µi bi·∫øn ƒë·ªông c·∫£m x√∫c',
      '8 bu·ªïi t∆∞ v·∫•n 1:1 trong 3 th√°ng',
    ],
    benefits: [
      'M·ªçi t√≠nh nƒÉng nh∆∞ g√≥i 1 th√°ng nh∆∞ng duy tr√¨ l√¢u d√†i h∆°n ƒë·ªÉ ngƒÉn t√°i nghi·ªán.',
      'ƒêi·ªÅu ch·ªânh k·∫ø ho·∫°ch theo ti·∫øn ƒë·ªô v√† thay ƒë·ªïi c·∫£m x√∫c theo t·ª´ng th√°ng.',
      'üí¨ 8 bu·ªïi t∆∞ v·∫•n 1:1 trong v√≤ng 3 th√°ng (2‚Äì3 tu·∫ßn/l·∫ßn, ∆∞u ti√™n ph·∫£n h·ªìi trong 24h khi g·ª≠i nh·∫≠t k√Ω ho·∫∑c c√¢u h·ªèi).',
    ],
    description:
      'Ph√π h·ª£p cho ng∆∞·ªùi mu·ªën duy tr√¨ ƒë·ªông l·ª±c l√¢u d√†i, c·∫ßn ƒëi·ªÅu ch·ªânh k·∫ø ho·∫°ch theo t·ª´ng giai ƒëo·∫°n v√† nh·∫≠n h·ªó tr·ª£ chuy√™n s√¢u h∆°n.',
    color: 'purple',
    borderColor: 'border-purple-500',
    buttonClass: 'bg-purple-500 hover:bg-purple-600',
    ctaText: 'Xem chi ti·∫øt',
    disabled: false,
    popular: true,
  },
  {
    id: 'premium-6m',
    name: 'Premium 6 th√°ng',
    price: 299000,
    duration: '180 ng√†y',
    shortDescription: 'X√¢y d·ª±ng th√≥i quen b·ªÅn v·ªØng',
    keyFeatures: [
      'K·∫ø ho·∫°ch 3 giai ƒëo·∫°n chuy√™n s√¢u',
      'Theo d√µi s·ª©c kh·ªèe n√¢ng cao',
      'Ghi nh·∫≠n bi·∫øn ƒë·ªông t√¢m l√Ω, gi·∫•c ng·ªß',
      'Thay ƒë·ªïi l·ªô tr√¨nh linh ho·∫°t',
      '16 bu·ªïi t∆∞ v·∫•n 1:1 trong 6 th√°ng',
    ],
    benefits: [
      'K·∫ø ho·∫°ch ƒë∆∞·ª£c chia th√†nh 3 giai ƒëo·∫°n: kh·ªüi ƒë·ªông ‚Äì th√≠ch nghi ‚Äì duy tr√¨.',
      'Theo d√µi h·ªìi ph·ª•c s·ª©c kh·ªèe n√¢ng cao v√† ƒë·ªông l·ª±c d√†i h·∫°n.',
      'Ghi nh·∫≠n bi·∫øn ƒë·ªông t√¢m l√Ω, gi·∫•c ng·ªß, c√¢n n·∫∑ng.',
      'C√≥ th·ªÉ thay ƒë·ªïi l·ªô tr√¨nh theo ph·∫£n h·ªìi t·ª´ chuy√™n gia.',
      'üí¨ 16 bu·ªïi t∆∞ v·∫•n 1:1 trong v√≤ng 6 th√°ng (2‚Äì3 bu·ªïi/th√°ng, d√†y ƒë·∫∑c ·ªü th√°ng ƒë·∫ßu v√† gi√£n d·∫ßn v·ªÅ sau).',
    ],
    description:
      'Ph√π h·ª£p cho ng∆∞·ªùi mu·ªën x√¢y d·ª±ng th√≥i quen kh√¥ng h√∫t thu·ªëc b·ªÅn v·ªØng, c·∫ßn theo d√µi s√°t sao v√† h·ªó tr·ª£ l√¢u d√†i t·ª´ chuy√™n gia.',
    color: 'red',
    borderColor: 'border-red-500',
    buttonClass: 'bg-red-500 hover:bg-red-600',
    ctaText: 'Xem chi ti·∫øt',
    disabled: false,
    popular: false,
  },
];

const formatCurrency = (number) => {
  return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(number);
};

const PremiumDetailsModal = ({ plan, open, onClose }) => {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  if (!plan) return null;
  
  const handleBuy = async () => {
    if (plan.id === 'free') {
      setLoading(true);
      try {
        // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ khai b√°o d·ªØ li·ªáu ch∆∞a
        const response = await api.get('/initial-condition/active');
        if (response.data) {
          // ƒê√£ khai b√°o r·ªìi, chuy·ªÉn th·∫≥ng ƒë·∫øn trang quit-plan-free
          toast.success('Chuy·ªÉn ƒë·∫øn trang t·∫°o k·∫ø ho·∫°ch cai thu·ªëc!');
          setTimeout(() => {
            navigate('/service/quit-plan-free');
          }, 1000);
        } else {
          // Ch∆∞a khai b√°o, chuy·ªÉn ƒë·∫øn trang khai b√°o tr∆∞·ªõc
          toast.info('Vui l√≤ng khai b√°o th√¥ng tin h√∫t thu·ªëc tr∆∞·ªõc!');
          setTimeout(() => {
            navigate('/init-status');
          }, 1000);
        }
      } catch (error) {
        if (error.response?.status === 404) {
          // Ch∆∞a khai b√°o d·ªØ li·ªáu, chuy·ªÉn ƒë·∫øn trang khai b√°o
          toast.info('Vui l√≤ng khai b√°o th√¥ng tin h√∫t thu·ªëc tr∆∞·ªõc!');
          setTimeout(() => {
            navigate('/init-status');
          }, 1000);
        } else {
          // C√≥ l·ªói kh√°c, hi·ªÉn th·ªã th√¥ng b√°o
          console.error('Error checking user data:', error);
          toast.error('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!');
        }
      } finally {
        setLoading(false);
        onClose();
      }
    } else {
      onClose();
      navigate(`/payment/${plan.id}`);
    }
  };
  
  return (
    <Modal
      open={open}
      onCancel={onClose}
      footer={null}
      centered
      title={<Title level={4} className="!mb-0">Chi ti·∫øt g√≥i: {plan.name}</Title>}
    >
      <div className="space-y-2">
        <Text strong>Gi√°:</Text>{' '}
        <Text type={plan.id === 'free' ? 'secondary' : 'danger'} strong>
          {plan.priceDisplay}
        </Text>
        <br />
        <Text strong>Th·ªùi h·∫°n:</Text> <Text>{plan.duration}</Text>
        <Divider />
        <Text strong>Quy·ªÅn l·ª£i:</Text>
        <List size="small" dataSource={plan.benefits || []} renderItem={(item) => <List.Item>- {item}</List.Item>} />
        <Divider />
        <Text strong>M√¥ t·∫£:</Text>
        <Paragraph>{plan.description}</Paragraph>
        <div className="flex justify-end mt-4">
          <Button 
            type="primary" 
            size="large" 
            onClick={handleBuy}
            loading={loading}
          >
            {plan.id === 'free' ? 'B·∫Øt ƒë·∫ßu ngay' : 'Mua ngay'}
          </Button>
        </div>
      </div>
    </Modal>
  );
};

const PremiumPlansSection = () => {
  const [billingCycle, setBillingCycle] = useState('1'); // '1', '3', '6'
  const [selectedPlan, setSelectedPlan] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  // T√≠nh gi√° gi·∫£m cho c√°c g√≥i tr·∫£ ph√≠
  const getPlanPrice = (plan, cycle) => {
    if (plan.id === 'free') return 0;
    const base = plan.price;
    let months = parseInt(cycle, 10);
    let total = base * months;
    if (months === 6) total *= 0.7;
    else if (months === 3) total *= 0.85;
    return Math.round(total);
  };

  // Hi·ªÉn th·ªã gi√° ƒë√£ gi·∫£m v√† label gi·∫£m gi√°
  const getPriceDisplay = (plan, cycle) => {
    if (plan.id === 'free') return '0ƒë';
    const months = parseInt(cycle, 10);
    const total = getPlanPrice(plan, cycle);
    const perMonth = Math.round(total / months);
    let label = formatCurrency(perMonth) + ' / th√°ng';
    return label;
  };

  const tabItems = [
    {
      key: '1',
      label: `Thanh to√°n theo th√°ng`,
    },
    {
      key: '3',
      label: (
        <span>
          Tr·∫£ tr∆∞·ªõc 3 th√°ng <Tag color="orange">Ti·∫øt ki·ªám 15%</Tag>
        </span>
      ),
    },
    {
      key: '6',
      label: (
        <span>
          Tr·∫£ tr∆∞·ªõc 6 th√°ng <Tag color="success">Ti·∫øt ki·ªám 30%</Tag>
        </span>
      ),
    },
  ];

  const handleOpenDetails = (plan) => {
    setSelectedPlan({ ...plan, priceDisplay: getPriceDisplay(plan, billingCycle) });
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedPlan(null);
  };

  return (
    <div className="w-full">
      <ToastContainer position="top-right" autoClose={3000} />
      <div className="flex justify-center mb-8">
        <Tabs defaultActiveKey="1" items={tabItems} onChange={setBillingCycle} centered size="large" />
      </div>
      <Row gutter={[16, 24]} justify="center">
        {PLANS.map((plan) => (
          <Col xs={24} sm={12} lg={6} xl={6} key={plan.id}>
            <Card
              className={`h-full transform transition-all duration-300 hover:scale-105 hover:shadow-2xl shadow-lg rounded-xl border-t-8 ${plan.borderColor} relative`}
            >
              {plan.popular && (
                <div className="absolute -top-3 left-1/2 transform -translate-x-1/2 z-10">
                  <Tag color="gold" className="px-4 py-1 text-sm font-bold">
                    PH·ªî BI·∫æN NH·∫§T
                  </Tag>
                </div>
              )}

              <div className="flex flex-col h-full">
                {/* Header */}
                <div className="text-center mb-6">
                  <h3 className={`text-xl font-bold mb-2 text-${plan.color}-600`}>
                    {plan.name}
                  </h3>
                  <p className="text-gray-600 text-xs mb-4">{plan.shortDescription}</p>
                  <div className="mb-4">
                    <span className="text-2xl font-extrabold text-gray-900">
                      {getPriceDisplay(plan, billingCycle)}
                    </span>
                  </div>
                </div>

                {/* Features */}
                <div className="flex-grow mb-6">
                  <ul className="space-y-2">
                    {plan.keyFeatures.map((feature, i) => (
                      <li key={i} className="flex items-start text-xs">
                        <CheckCircleFilled
                          className={`text-${plan.color}-500 mr-2 mt-0.5 flex-shrink-0`}
                        />
                        <span className="text-gray-700 leading-relaxed">{feature}</span>
                      </li>
                    ))}
                  </ul>
                </div>

                {/* CTA Button */}
                <div className="mt-auto">
                  <Button
                    type="primary"
                    size="large"
                    block
                    className={`font-bold text-white ${plan.buttonClass} h-10`}
                    disabled={plan.disabled}
                    onClick={() => !plan.disabled && handleOpenDetails(plan)}
                  >
                    Xem chi ti·∫øt
                  </Button>
                </div>
              </div>
            </Card>
          </Col>
        ))}
      </Row>
      <PremiumDetailsModal plan={selectedPlan} open={isModalOpen} onClose={handleCloseModal} />
    </div>
  );
};

export default PremiumPlansSection; 