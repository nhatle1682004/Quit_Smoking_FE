import React, { useState } from 'react';
import { Card, Button, Tabs, Tag, Row, Col } from 'antd';
import { CheckCircleFilled } from '@ant-design/icons';

// Modal chi ti·∫øt g√≥i (t√≠ch h·ª£p l·∫°i logic PremiumDetailsModal)
import { Modal, Typography, List, Divider } from 'antd';
import { useNavigate } from 'react-router-dom';
const { Title, Text, Paragraph } = Typography;

const PLANS = [
  
  {
    id: 'premium-1m',
    name: 'Premium 1 th√°ng',
    price: 99000,
    duration: '30 ng√†y',
    benefits: [
      'K·∫ø ho·∫°ch cai thu·ªëc ƒë∆∞·ª£c c√° nh√¢n h√≥a theo ƒë·ªô nghi·ªán v√† m·ª•c ti√™u c√° nh√¢n.',
      'Nhi·ªám v·ª• m·ªói ng√†y, b√†i t·∫≠p ·ª©ng ph√≥ c∆°n th√®m thu·ªëc, h∆∞·ªõng d·∫´n thi·ªÅn v√† ki·ªÉm so√°t c·∫£m x√∫c.',
      'Ghi nh·∫≠t k√Ω + nh·∫≠n ph·∫£n h·ªìi t·ª´ chuy√™n gia hu·∫•n luy·ªán.',
      'Th·ªëng k√™ chi ti·∫øt qu√° tr√¨nh ph·ª•c h·ªìi: s·ªë ng√†y b·ªè thu·ªëc, s·ªë ƒëi·∫øu tr√°nh ƒë∆∞·ª£c, s·ªë ti·ªÅn ti·∫øt ki·ªám, v.v.',
      '∆Øu ti√™n h·ªó tr·ª£ k·ªπ thu·∫≠t v√† gi·∫£i ƒë√°p.',
      'üí¨ 4 bu·ªïi t∆∞ v·∫•n 1:1 trong th√°ng (30‚Äì45 ph√∫t/bu·ªïi, ƒë·∫∑t l·ªãch linh ho·∫°t, online Google Meet).'
    ],
    description: 'Ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu cai thu·ªëc, c·∫ßn ƒë·ªãnh h∆∞·ªõng v√† ƒë∆∞·ª£c theo s√°t trong giai ƒëo·∫°n ƒë·∫ßu. Nh·ªØng ng∆∞·ªùi c√≥ ƒë·ªông l·ª±c t·ª± th√¢n m·∫°nh, nh∆∞ng v·∫´n c·∫ßn ƒë∆∞·ª£c kh√≠ch l·ªá v√† ƒëi·ªÅu ch·ªânh k·∫ø ho·∫°ch khi g·∫∑p c·∫£n tr·ªü.',
    color: 'blue',
    borderColor: 'border-blue-500',
    buttonClass: 'bg-blue-500 hover:bg-blue-600',
    ctaText: 'Xem chi ti·∫øt',
    disabled: false,
  },
  {
    id: 'premium-3m',
    name: 'Premium 3 th√°ng',
    price: 199000,
    duration: '90 ng√†y',
    benefits: [
      'M·ªçi t√≠nh nƒÉng nh∆∞ g√≥i 1 th√°ng nh∆∞ng duy tr√¨ l√¢u d√†i h∆°n ƒë·ªÉ ngƒÉn t√°i nghi·ªán.',
      'ƒêi·ªÅu ch·ªânh k·∫ø ho·∫°ch theo ti·∫øn ƒë·ªô v√† thay ƒë·ªïi c·∫£m x√∫c theo t·ª´ng th√°ng.',
      'üí¨ 8 bu·ªïi t∆∞ v·∫•n 1:1 trong v√≤ng 3 th√°ng (2‚Äì3 tu·∫ßn/l·∫ßn, ∆∞u ti√™n ph·∫£n h·ªìi trong 24h khi g·ª≠i nh·∫≠t k√Ω ho·∫∑c c√¢u h·ªèi).'
    ],
    description: 'Ph√π h·ª£p cho ng∆∞·ªùi mu·ªën duy tr√¨ ƒë·ªông l·ª±c l√¢u d√†i, c·∫ßn ƒëi·ªÅu ch·ªânh k·∫ø ho·∫°ch theo t·ª´ng giai ƒëo·∫°n v√† nh·∫≠n h·ªó tr·ª£ chuy√™n s√¢u h∆°n.',
    color: 'purple',
    borderColor: 'border-purple-500',
    buttonClass: 'bg-purple-500 hover:bg-purple-600',
    ctaText: 'Xem chi ti·∫øt',
    disabled: false,
  },
  {
    id: 'premium-6m',
    name: 'Premium 6 th√°ng',
    price: 299000,
    duration: '180 ng√†y',
    benefits: [
      'K·∫ø ho·∫°ch ƒë∆∞·ª£c chia th√†nh 3 giai ƒëo·∫°n: kh·ªüi ƒë·ªông ‚Äì th√≠ch nghi ‚Äì duy tr√¨.',
      'Theo d√µi h·ªìi ph·ª•c s·ª©c kh·ªèe n√¢ng cao v√† ƒë·ªông l·ª±c d√†i h·∫°n.',
      'Ghi nh·∫≠n bi·∫øn ƒë·ªông t√¢m l√Ω, gi·∫•c ng·ªß, c√¢n n·∫∑ng.',
      'C√≥ th·ªÉ thay ƒë·ªïi l·ªô tr√¨nh theo ph·∫£n h·ªìi t·ª´ chuy√™n gia.',
      'üí¨ 16 bu·ªïi t∆∞ v·∫•n 1:1 trong v√≤ng 6 th√°ng (2‚Äì3 bu·ªïi/th√°ng, d√†y ƒë·∫∑c ·ªü th√°ng ƒë·∫ßu v√† gi√£n d·∫ßn v·ªÅ sau).'
    ],
    description: 'Ph√π h·ª£p cho ng∆∞·ªùi mu·ªën x√¢y d·ª±ng th√≥i quen kh√¥ng h√∫t thu·ªëc b·ªÅn v·ªØng, c·∫ßn theo d√µi s√°t sao v√† h·ªó tr·ª£ l√¢u d√†i t·ª´ chuy√™n gia.',
    color: 'red',
    borderColor: 'border-red-500',
    buttonClass: 'bg-red-500 hover:bg-red-600',
    ctaText: 'Xem chi ti·∫øt',
    disabled: false,
  },
];

const formatCurrency = (number) => {
  return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(number);
};

const PremiumDetailsModal = ({ plan, open, onClose }) => {
  const navigate = useNavigate();
  if (!plan) return null;
  const handleBuy = () => {
    onClose();
    navigate(`/payment/${plan.id}`);  
  };
  return (
    <Modal
      open={open}
      onCancel={onClose}
      footer={null}
      centered
      title={<Title level={4} className="!mb-0">Chi ti·∫øt g√≥i: {plan.name}</Title>}
    >
      <div className="space-y-2">
        <Text strong>Gi√°:</Text> <Text type="danger" strong>{plan.priceDisplay}</Text>
        <br />
        <Text strong>Th·ªùi h·∫°n:</Text> <Text>{plan.duration}</Text>
        <Divider />
        <Text strong>Quy·ªÅn l·ª£i:</Text>
        <List
          size="small"
          dataSource={plan.benefits || []}
          renderItem={item => <List.Item>- {item}</List.Item>}
        />
        <Divider />
        <Text strong>M√¥ t·∫£:</Text>
        <Paragraph>{plan.description}</Paragraph>
        <div className="flex justify-end mt-4">
          <Button type="primary" size="large" onClick={handleBuy}>
            Mua ngay
            
          </Button>
          
        </div>
      </div>
    </Modal>
  );
};

const PremiumPlansSection = () => {
  const [billingCycle, setBillingCycle] = useState('1'); // '1', '3', '6'
  const [selectedPlan, setSelectedPlan] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  // T√≠nh gi√° gi·∫£m cho c√°c g√≥i tr·∫£ ph√≠
  const getPlanPrice = (plan, cycle) => {
    if (plan.id === 'free') return 0;
    const base = plan.price;
    let months = parseInt(cycle, 10);
    let total = base * months;
    if (months === 6) total *= 0.7;
    else if (months === 3) total *= 0.85;
    return Math.round(total);
  };

  // Hi·ªÉn th·ªã gi√° ƒë√£ gi·∫£m v√† label gi·∫£m gi√°
  const getPriceDisplay = (plan, cycle) => {
    if (plan.id === 'free') return '0ƒë';
    const months = parseInt(cycle, 10);
    const total = getPlanPrice(plan, cycle);
    const perMonth = Math.round(total / months);
    let label = formatCurrency(perMonth) + ' / th√°ng';
    if (months === 3) label += ' (gi·∫£m 15%)';
    if (months === 6) label += ' (gi·∫£m 30%)';
    return label;
  };

  const tabItems = [
    {
      key: '1',
      label: `Thanh to√°n theo th√°ng`,
    },
    {
      key: '3',
      label: (
        <span>
          Tr·∫£ tr∆∞·ªõc 3 th√°ng <Tag color="orange">Ti·∫øt ki·ªám 15%</Tag>
        </span>
      ),
    },
    {
      key: '6',
      label: (
        <span>
          Tr·∫£ tr∆∞·ªõc 6 th√°ng <Tag color="success">Ti·∫øt ki·ªám 30%</Tag>
        </span>
      ),
    },
  ];

  const handleOpenDetails = (plan) => {
    setSelectedPlan({ ...plan, priceDisplay: getPriceDisplay(plan, billingCycle) });
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setSelectedPlan(null);
  };

  return (
    <div className="w-full">
      <div className="flex justify-center mb-8">
        <Tabs defaultActiveKey="1" items={tabItems} onChange={setBillingCycle} centered size="large" />
      </div>
      <Row gutter={[24, 24]} justify="center">
        {PLANS.map((plan) => (
          <Col xs={24} sm={12} md={12} lg={6} key={plan.id}>
            <Card
              className={`transform transition-transform hover:scale-105 shadow-lg rounded-xl border-t-8 ${plan.borderColor}`}
            >
              <div className="p-4 text-center">
                <h3 className={`text-2xl font-bold mb-4 text-${plan.color}-600`}>{plan.name}</h3>
                <div className="my-6">
                  <span className="text-3xl font-extrabold text-gray-900">
                    {plan.id === 'free'
                      ? '0ƒë'
                      : getPriceDisplay(plan, billingCycle)
                    }
                  </span>
                </div>
                <ul className="text-left space-y-3 mb-8">
                  {plan.benefits.slice(0, 2).map((feature, i) => (
                    <li key={i} className="flex items-start">
                      <CheckCircleFilled className={`text-${plan.color}-500 mr-3 mt-1`} />
                      <span>{feature}</span>
                    </li>
                  ))}
                </ul>
                <Button
                  type="primary"
                  size="large"
                  block
                  className={`font-bold text-white ${plan.buttonClass}`}
                  disabled={plan.disabled}
                  onClick={() => !plan.disabled && handleOpenDetails(plan)}
                >
                  {plan.ctaText}
                </Button>
              </div>
            </Card>
          </Col>
        ))}
      </Row>
      <PremiumDetailsModal plan={selectedPlan} open={isModalOpen} onClose={handleCloseModal} />
    </div>
  );
};

export default PremiumPlansSection; 