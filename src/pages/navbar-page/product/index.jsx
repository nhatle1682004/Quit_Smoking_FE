import React, { useState, useEffect } from "react";
import { FiPackage, FiCalendar, FiTrendingUp, FiHeart } from "react-icons/fi";
import axios from "axios";
import { Alert } from "antd";
import api from "./../../../configs/axios";

const QuoteSlider = () => {
  const quotes = [
    "M·ªói ng√†y kh√¥ng h√∫t thu·ªëc l√† m·ªôt chi·∫øn th·∫Øng ƒë√°ng ƒÉn m·ª´ng",
    "L√° ph·ªïi b·∫°n ƒëang kh·ªèe d·∫ßn theo t·ª´ng h∆°i th·ªü s·∫°ch",
    "B·∫°n kh√¥ng t·ª´ b·ªè g√¨ c·∫£, b·∫°n ƒëang ƒë·∫°t ƒë∆∞·ª£c m·ªçi th·ª©",
    "Nh·ªØng b∆∞·ªõc nh·ªè t·∫°o n√™n thay ƒë·ªïi l·ªõn",
  ];
  const [currentQuote, setCurrentQuote] = useState(0);

  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentQuote((prev) => (prev + 1) % quotes.length);
    }, 5000);
    return () => clearInterval(timer);
  }, []);

  return (
    <div className="bg-gradient-to-r from-green-50 to-blue-50 p-6 rounded-xl shadow-sm">
      <p className="text-lg text-gray-700 italic animate-fade-in">
        {quotes[currentQuote]}
      </p>
    </div>
  );
};

const ProgressBar = ({ currentStep }) => (
  <div className="w-full bg-gray-100 h-2 rounded-full mb-8">
    <div
      className="bg-gradient-to-r from-green-400 to-blue-500 h-2 rounded-full transition-all duration-500"
      style={{ width: `${(currentStep / 3) * 100}%` }}
    ></div>
  </div>
);

const ProductPage = () => {
  const [step, setStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [submitted, setSubmitted] = useState(false);
  const [formData, setFormData] = useState({
    cigarettesPerDay: "",
    firstSmokeTime: "",
    quitReason: "",
    intentionSince: "",
    readinessScale: "",
    emotion: "",
  });
  const [errors, setErrors] = useState({});

  const formatDate = (dateStr) => {
    const date = new Date(dateStr);
    return date.toISOString().split("T")[0];
  };

  const validateStep = (currentStep) => {
    const newErrors = {};
    if (currentStep === 1) {
      if (!formData.cigarettesPerDay)
        newErrors.cigarettesPerDay = "Vui l√≤ng nh·∫≠p s·ªë ƒëi·∫øu m·ªói ng√†y";
      if (!formData.firstSmokeTime)
        newErrors.firstSmokeTime = "Vui l√≤ng ch·ªçn th·ªùi gian";
    }
    if (currentStep === 2) {
      if (!formData.quitReason)
        newErrors.quitReason = "Vui l√≤ng nh·∫≠p l√Ω do b·ªè thu·ªëc";
      if (!formData.intentionSince)
        newErrors.intentionSince = "Vui l√≤ng ch·ªçn ng√†y";
    }
    if (currentStep === 3) {
      if (!formData.readinessScale)
        newErrors.readinessScale = "Vui l√≤ng nh·∫≠p m·ª©c s·∫µn s√†ng";
      if (!formData.emotion) newErrors.emotion = "Vui l√≤ng nh·∫≠p c·∫£m x√∫c";
    }
    return newErrors;
  };

  const handleNext = () => {
    const stepErrors = validateStep(step);
    if (Object.keys(stepErrors).length === 0) {
      setStep((prev) => Math.min(prev + 1, 3));
      setErrors({});
    } else {
      setErrors(stepErrors);
    }
  };

  const handlePrevious = () => {
    setStep((prev) => Math.max(prev - 1, 1));
    setErrors({});
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const stepErrors = validateStep(step);
    if (Object.keys(stepErrors).length === 0) {
      setLoading(true);
      const payload = {
        ...formData,
        intentionSince: formatDate(formData.intentionSince),
        createdAt: new Date().toISOString(),
      };

      try {
        // L·∫•y token t·ª´ localStorage (n·∫øu c√≥)
        const token = localStorage.getItem("token");
        const config = token
          ? { headers: { Authorization: `Bearer ${token}` } }
          : {};

        const response = await api.post("/initial-condition", payload, config);
        alert("üéâ G·ª≠i th√¥ng tin th√†nh c√¥ng!");
        setSubmitted(true);
      } catch (err) {
        if (err.response && err.response.status === 401) {
          alert("‚ùå B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n.");
        } else {
          alert("‚ùå C√≥ l·ªói khi g·ª≠i th√¥ng tin.");
        }
        console.error(err);
      } finally {
        setLoading(false);
      }
    } else {
      setErrors(stepErrors);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  if (submitted) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-green-50">
        <div className="bg-white p-8 rounded-xl shadow-lg text-center">
          <h2 className="text-2xl font-bold text-green-600 mb-4">
            üéâ C·∫£m ∆°n b·∫°n!
          </h2>
          <p className="text-gray-700">
            Ch√∫ng t√¥i ƒë√£ ghi nh·∫≠n h√†nh tr√¨nh b·ªè thu·ªëc c·ªßa b·∫°n.
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 py-12 px-4">
      <div className="max-w-2xl mx-auto bg-white rounded-2xl shadow-xl p-8">
        <h1 className="text-3xl font-bold text-center text-gray-800 mb-8">
          H√†nh tr√¨nh b·ªè thu·ªëc c·ªßa b·∫°n
        </h1>
        <QuoteSlider />
        <div className="mt-8">
          <ProgressBar currentStep={step} />
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          {step === 1 && (
            <div className="space-y-4 animate-fade-in">
              <h2 className="text-xl font-semibold text-gray-700 flex items-center gap-2">
                <FiPackage className="text-blue-500" /> Th√≥i quen h√∫t thu·ªëc
              </h2>
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  S·ªë ƒëi·∫øu thu·ªëc m·ªói ng√†y
                </label>
                <input
                  type="number"
                  name="cigarettesPerDay"
                  value={formData.cigarettesPerDay}
                  onChange={handleChange}
                  placeholder="Nh·∫≠p s·ªë ƒëi·∫øu b·∫°n h√∫t m·ªói ng√†y"
                  className="w-full rounded-md border-gray-300 shadow-sm mt-1"
                />
                {errors.cigarettesPerDay && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.cigarettesPerDay}
                  </p>
                )}
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  Th·ªùi gian h√∫t ƒëi·∫øu ƒë·∫ßu ti√™n
                </label>
                <input
                  type="time"
                  name="firstSmokeTime"
                  value={formData.firstSmokeTime}
                  onChange={handleChange}
                  className="w-full rounded-md border-gray-300 shadow-sm mt-1"
                />
                {errors.firstSmokeTime && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.firstSmokeTime}
                  </p>
                )}
              </div>
            </div>
          )}

          {step === 2 && (
            <div className="space-y-4 animate-fade-in">
              <h2 className="text-xl font-semibold text-gray-700 flex items-center gap-2">
                <FiCalendar className="text-blue-500" /> √ù ƒë·ªãnh b·ªè thu·ªëc
              </h2>
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  L√Ω do b·∫°n mu·ªën b·ªè thu·ªëc
                </label>
                <textarea
                  name="quitReason"
                  value={formData.quitReason}
                  onChange={handleChange}
                  rows="3"
                  placeholder="V√≠ d·ª•: v√¨ s·ª©c kh·ªèe, gia ƒë√¨nh, t√†i ch√≠nh..."
                  className="w-full rounded-md border-gray-300 shadow-sm mt-1"
                />
                {errors.quitReason && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.quitReason}
                  </p>
                )}
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  B·∫°n ƒë√£ c√≥ √Ω ƒë·ªãnh b·ªè thu·ªëc t·ª´ khi n√†o?
                </label>
                <input
                  type="date"
                  name="intentionSince"
                  value={formData.intentionSince}
                  onChange={handleChange}
                  className="w-full rounded-md border-gray-300 shadow-sm mt-1"
                />
                {errors.intentionSince && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.intentionSince}
                  </p>
                )}
              </div>
            </div>
          )}

          {step === 3 && (
            <div className="space-y-4 animate-fade-in">
              <h2 className="text-xl font-semibold text-gray-700 flex items-center gap-2">
                <FiTrendingUp className="text-blue-500" /> S·∫µn s√†ng & C·∫£m x√∫c
              </h2>
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  M·ª©c ƒë·ªô s·∫µn s√†ng (0 ƒë·∫øn 10)
                </label>
                <input
                  type="number"
                  name="readinessScale"
                  min={0}
                  max={10}
                  placeholder="V√≠ d·ª•: 7"
                  value={formData.readinessScale}
                  onChange={handleChange}
                  className="w-full rounded-md border-gray-300 shadow-sm mt-1"
                />
                {errors.readinessScale && (
                  <p className="text-red-500 text-sm mt-1">
                    {errors.readinessScale}
                  </p>
                )}
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700">
                  C·∫£m x√∫c hi·ªán t·∫°i
                </label>
                <input
                  name="emotion"
                  value={formData.emotion}
                  onChange={handleChange}
                  placeholder="V√≠ d·ª•: lo l·∫Øng, t·ª± tin, √°p l·ª±c..."
                  className="w-full rounded-md border-gray-300 shadow-sm mt-1"
                />
                {errors.emotion && (
                  <p className="text-red-500 text-sm mt-1">{errors.emotion}</p>
                )}
              </div>
            </div>
          )}

          <div className="flex justify-between pt-4">
            {step > 1 && (
              <button
                type="button"
                onClick={handlePrevious}
                className="bg-gray-100 text-gray-800 px-6 py-2 rounded-md hover:bg-gray-200"
              >
                Quay l·∫°i
              </button>
            )}
            {step < 3 ? (
              <button
                type="button"
                onClick={handleNext}
                className="ml-auto bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700"
              >
                Ti·∫øp theo
              </button>
            ) : (
              <button
                type="submit"
                disabled={loading}
                className={`ml-auto px-6 py-2 rounded-md text-white ${
                  loading
                    ? "bg-green-300 cursor-not-allowed"
                    : "bg-green-600 hover:bg-green-700"
                }`}
              >
                {loading ? "ƒêang g·ª≠i..." : "G·ª≠i th√¥ng tin"}
              </button>
            )}
          </div>
        </form>
      </div>
    </div>
  );
};

export default ProductPage;
