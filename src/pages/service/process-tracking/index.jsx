import React, { useEffect, useState } from 'react';
import { toast } from 'react-toastify';
import api from '../../../configs/axios';
import { Button, Form, Progress, Card } from 'antd';
import { useNavigate } from 'react-router-dom';
import dayjs from 'dayjs'; // Import dayjs ƒë·ªÉ t√≠nh to√°n ng√†y th√°ng
import { HomeOutlined } from '@ant-design/icons';


function ProcessTracking() {
  const [planData, setPlanData] = useState(null); // Kh·ªüi t·∫°o v·ªõi null cho r√µ r√†ng, thay v√¨ []
  const [progress, setProgress] = useState(0); // Tr·∫°ng th√°i cho ph·∫ßn trƒÉm ti·∫øn tr√¨nh
  const [form] = Form.useForm();
  const navigate = useNavigate();

  const fetchFreePlan = async () => {
    try {
      const response = await api.get('/free-plan/active');
      setPlanData(response.data);
      calculateProgress(response.data); // T√≠nh to√°n ti·∫øn tr√¨nh sau khi l·∫•y d·ªØ li·ªáu
      toast.success('D·ªØ li·ªáu k·∫ø ho·∫°ch ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!');
    } catch (error) {
      toast.error('L·ªói khi t·∫£i d·ªØ li·ªáu k·∫ø ho·∫°ch!');
      console.error('L·ªói khi l·∫•y k·∫ø ho·∫°ch mi·ªÖn ph√≠:', error);
      setPlanData(null); // ƒê·∫£m b·∫£o planData l√† null khi c√≥ l·ªói
    }
  };

  useEffect(() => {
    fetchFreePlan();
  }, []);

  // H√†m t√≠nh to√°n ti·∫øn tr√¨nh
  const calculateProgress = (plan) => {
    if (!plan || !plan.startDate || !plan.endDate) {
      setProgress(0);
      return;
    }

    const startDate = dayjs(plan.startDate);
    const endDate = dayjs(plan.endDate);
    const now = dayjs();

    // N·∫øu ng√†y hi·ªán t·∫°i tr∆∞·ªõc ng√†y b·∫Øt ƒë·∫ßu, ti·∫øn tr√¨nh l√† 0
    if (now.isBefore(startDate)) {
      setProgress(0);
      return;
    }

    // N·∫øu ng√†y hi·ªán t·∫°i sau ng√†y k·∫øt th√∫c, ti·∫øn tr√¨nh l√† 100
    if (now.isAfter(endDate)) {
      setProgress(100);
      return;
    }

    const totalDuration = endDate.diff(startDate, 'day'); // T·ªïng s·ªë ng√†y c·ªßa k·∫ø ho·∫°ch
    const elapsedDuration = now.diff(startDate, 'day'); // S·ªë ng√†y ƒë√£ tr√¥i qua

    if (totalDuration > 0) {
      const calculatedProgress = (elapsedDuration / totalDuration) * 100;
      // ƒê·∫£m b·∫£o ti·∫øn tr√¨nh n·∫±m trong kho·∫£ng 0 ƒë·∫øn 100
      setProgress(Math.min(100, Math.max(0, parseFloat(calculatedProgress.toFixed(2)))));
    } else {
      setProgress(0); // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c gi·ªëng nhau
    }
  };

  const handleCancel = async () => {
    try {
      await api.put('/free-plan/cancel');
      toast.success('K·∫ø ho·∫°ch ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng!');
      // Sau khi h·ªßy th√†nh c√¥ng, b·∫°n c√≥ th·ªÉ x√≥a planData v√† c·∫≠p nh·∫≠t ti·∫øn tr√¨nh
      setPlanData(null);
      setProgress(0);
      navigate('/service/quit-plan-free');
    } catch (err) {
      toast.error('L·ªói khi h·ªßy k·∫ø ho·∫°ch!');
      console.error('L·ªói khi h·ªßy k·∫ø ho·∫°ch:', err);
    }
  };

  return (
    <div className="min-h-screen p-8 bg-gradient-to-br from-blue-50 to-indigo-100 flex flex-col items-center">
      <h1 className="text-3xl font-extrabold text-gray-800 text-center mb-8 drop-shadow-md">
        üö≠ H√†nh Tr√¨nh Cai Thu·ªëc - Kh·ªüi ƒê·∫ßu Cu·ªôc S·ªëng M·ªõi
      </h1>


      {planData ? (
        <Card className="w-full max-w-2xl p-6 shadow-xl rounded-lg bg-white transform transition-all duration-300 hover:scale-105">
          <h2 className="text-xl font-semibold mb-4 text-gray-700">Th√¥ng Tin K·∫ø Ho·∫°ch Hi·ªán T·∫°i</h2>
          <div className="space-y-3 text-gray-600 mb-6">
            <p>
              <strong>Ng√†y B·∫Øt ƒê·∫ßu:</strong> {dayjs(planData.startDate).format('DD/MM/YYYY')}
            </p>
            <p>
              <strong>Ng√†y K·∫øt Th√∫c:</strong> {dayjs(planData.endDate).format('DD/MM/YYYY')}
            </p>
            <p>
              <strong>M·ª•c Ti√™u:</strong> {planData.goal}
            </p>
            <p>
              <strong>L√Ω Do Th√∫c ƒê·∫©y:</strong> {planData.motivationReason}
            </p>
            <p>
              <strong>Ghi Ch√∫:</strong> {planData.note || 'Kh√¥ng c√≥ ghi ch√∫.'}
            </p>
          </div>

          <div className="mb-6">
            <h3 className="text-lg font-semibold mb-2 text-gray-700">Ti·∫øn Tr√¨nh Ho√†n Th√†nh</h3>
            <Progress percent={progress} status={progress === 100 ? 'success' : 'active'} strokeColor={{
              '0%': '#108ee9',
              '100%': '#87d068',
            }} />
            <p className="text-sm text-gray-500 mt-2">
              {progress === 100
                ? 'Ch√∫c m·ª´ng! B·∫°n ƒë√£ ho√†n th√†nh k·∫ø ho·∫°ch!'
                : `C√≤n l·∫°i ${dayjs(planData.endDate).diff(dayjs(), 'day')} ng√†y ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c m·ª•c ti√™u.`}
            </p>
          </div>

          <Form layout="vertical" form={form} onFinish={handleCancel}>
            <Form.Item>
              <Button
                type="primary"
                htmlType="submit"
                danger
                className="w-full h-10 text-lg rounded-md hover:bg-red-600 transition-colors"
              >
                H·ªßy K·∫ø Ho·∫°ch Cai Thu·ªëc
              </Button>
            </Form.Item>
          </Form>
        </Card>
      ) : (
        <div className="text-center text-gray-600 text-lg mt-10 p-4 bg-white rounded-lg shadow-md">
          <p>Hi·ªán t·∫°i kh√¥ng c√≥ k·∫ø ho·∫°ch cai thu·ªëc n√†o ƒëang ho·∫°t ƒë·ªông.</p>
          <Button
            type="primary"
            className="mt-4 bg-blue-500 hover:bg-blue-600 rounded-md"
            onClick={() => navigate('/service/quit-plan-free')} // V√≠ d·ª•: ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang t·∫°o k·∫ø ho·∫°ch
            
          >
            T·∫°o K·∫ø Ho·∫°ch M·ªõi
            
          </Button>
          <Button
            icon={<HomeOutlined />}
            className="mb-4"
            onClick={() => navigate('/')} // Navigate to home page
          >

            Quay L·∫°i Trang Ch·ªß
          </Button>
        </div>
      )}
    </div>
  );
}

export default ProcessTracking;